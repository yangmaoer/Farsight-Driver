=================
===platform_driver	-	驱动部分说明
=================
[1]手动创建platform_driver对象
	struct platform_driver myplatformdriver = {0};
[2]mymodule_init（）
	<1>初始化platform_driver对象
   		指明驱动和设备的匹配标志	-	注意：要与platform_device中的名字相同
			myplatformdriver.driver.name
		指明驱动的拥有着、便于驱动卸载的时候检查是否还有设备在使用
			myplatformdriver.driver.owner 	
		声明匹配回调函数
			myplatformdriver.probe
		声明注销函数
		   当设备从系统中删除的时候调用remove
			myplatformdriver.remove
	 <2>platform_driver驱动对象加入总线
		platform_driver_register(&myplatformdriver);
[3]mymodule_exit(void)
	(1)从platform_bus总线中卸载platform_driver对象

		platform_driver_unregister(&myplatformdriver);
=========
PS：	probe功能、remove说明
	【1】int myprobe(struct platform_device *platformdev)
		【1】setup_PWM_cdev(platformdev);
     			(1)声明资源接受结构体指针
				struct resource *myresource_mem
   			  (2)获取资源
				platform_get_resource(platformdev, IORESOURCE_MEM, 0)
				通过偏移、获取后续资源
				platform_get_resource(platformdev, IORESOURCE_MEM, 1);
   			 (3)把资源中的物理地址转化成虚拟地址
				mydev.pwmbase = ioremap(myresource_mem->start,  myresource_mem->end - myresource_mem->start);

  			  (4)cdev初始化
			  (5)设备与驱动匹配后、自动创建设备节点
				mydev.mytest_class = class_create(THIS_MODULE, "mytest");

							驱动所有者、设备_类名[ 目录位于sys/class/ ]		
				mydev.mytest_device = device_create(mydev.mytest_class, NULL,  mydev.devnum, NULL, "pwm%d", 0);
   			(6)PWM初始化
				PWM_REGISTER_INIT();

	【2】int myremove(struct platform_device *platformdev)
		（1）回还虚拟地址
			iounmap(mydev.GPD0CON);
		（2）删除设备节点
			device_del(mydev.mytest_device);
		（3）删除设备_类
			class_destroy(mydev.mytest_class);
		（4）删除cdev
			cdev_del(mydev.cdev);
		（5）注销设备号
			unregister_chrdev_region(mydev.devnum, 1);	


